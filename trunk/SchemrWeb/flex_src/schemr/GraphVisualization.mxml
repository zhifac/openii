<?xml version="1.0" encoding="utf-8"?>

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
	creationComplete="init()"
	xmlns:schemr="*">
	
	
	
	<mx:Panel width="200" height="200" alpha="0.6">
		<mx:TextArea id="properties" backgroundAlpha="0.5" color="#DD2222" width="100%" height="100%" text="Information will appear in this box as you mouseover schema elements." />
	</mx:Panel>
	
	<!--<mx:Image source="schemr/assets/close.png" id="close"/>-->
		
	<mx:HBox width="100%" height="100%" id="panel1">
	
	
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Image;
		import flare.vis.events.SelectionEvent;
		import flare.vis.operator.layout.Layout;
		import mx.events.ItemClickEvent;
		import flash.utils.setInterval;
		import graphml.GraphMLReader;
		import flare.animate.Transitioner;
		import flare.data.DataSet;
		import flare.display.RectSprite;
		import flare.display.TextSprite;
		import flare.vis.Visualization;
		import flare.vis.data.Data;
		import flare.vis.data.NodeSprite;
		import flare.vis.operator.filter.GraphDistanceFilter;
		import flare.vis.operator.layout.RadialTreeLayout;
		import flare.vis.operator.layout.NodeLinkTreeLayout;
		
		import flash.display.Sprite;
		import flash.events.MouseEvent;
		import flash.geom.Rectangle;
		import flash.text.TextFormat;
		
		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;
		import flare.data.converters.GraphMLConverter;
		import mx.controls.Alert;	
		
		private var vis:Visualization;
		private var lab:TextSprite; 		
		private var maxLabelWidth:Number;
		private var maxLabelHeight:Number;
		private var prev:NodeSprite;
		private var _gdf:GraphDistanceFilter;
		private var changeCenter:Boolean;
		private var _maxDistance:int = 2;
		private var xpos:Number = 0;
		private var ypos:Number = 0;
		
		private var _transitionDuration:Number = 2;
		
		public function init():void{ 
			//GraphMLFile('schemr/assets/out005.xml');
			
		}
		public function test():void{
			
		}
		
		public function GraphMLFile(fileName:String):void {
			var gmr:GraphMLReader = new GraphMLReader(onLoaded);
			onLoaded(gmr.read(fileName));
		}
		
		
		private var lay:Layout = null;
		private function onLoaded(data:Data):void {
			
			vis = new Visualization(data);
			
			var w:Number = 600;
			var h:Number = 600;
			
			vis.bounds = new Rectangle(0, 0, w, h);
			
			
			var textFormat:TextFormat = new TextFormat();
			textFormat.color = 0xffffffff;
			textFormat.font= "_sans";
			var i:int = 0;
			vis.data.nodes.visit(function(ns:NodeSprite):void { 
				var ts:TextSprite = new TextSprite(ns.data.name,textFormat);	
				ns.addChild(ts);	
			});
			
			vis.data.nodes.setProperty("x",w/2);
			vis.data.nodes.setProperty("y",h/2);
			maxLabelWidth = getMaxTextLabelWidth();
			maxLabelHeight = getMaxTextLabelHeight();
			vis.data.nodes.visit(function(ns:NodeSprite):void { 
				var rs:RectSprite = new RectSprite( -maxLabelWidth/2-1,-maxLabelHeight/2 - 1, maxLabelWidth + 2, maxLabelHeight + 2);
					if (ns.data.type == "Schema") rs.fillColor = 0xdd660000;
					else rs.fillColor = 0xaa000000; 
					rs.lineColor = 0xff000044; 
				rs.lineWidth = 2;
				ns.size = 0;
				ns.addChildAt(rs, 0); // at postion 0 so that the text label is drawn above the rectangular box
				rs.dirty();
				adjustLabel(ns,maxLabelWidth,maxLabelHeight);
				ns.mouseChildren = false; 
				ns.doubleClickEnabled = true;
				ns.addEventListener(MouseEvent.DOUBLE_CLICK, update);
				ns.addEventListener(MouseEvent.MOUSE_OVER, drawInfo);
				panel1.addEventListener(MouseEvent.MOUSE_OUT, hideBox);
				
				ns.addEventListener(MouseEvent.MOUSE_DOWN, drag);
				ns.addEventListener(MouseEvent.MOUSE_UP, stop);
				ns.addEventListener(MouseEvent.MOUSE_WHEEL, die);
				ns.buttonMode = true;
			});
			if (lay==null) lay =  new NodeLinkTreeLayout();
			var root:NodeSprite = vis.data.nodes[0] as NodeSprite;
			trace(data.length);
			_gdf = new GraphDistanceFilter([root], _maxDistance,NodeSprite.GRAPH_LINKS); 
			
			actionbox.setVisible(true);
			vis.operators.add(_gdf); //distance filter has to be added before the layout
			vis.operators.add(lay);
			
			panel1.rawChildren.addChildAt(vis, panel1.rawChildren.numChildren);
			try{
				updateRoot(vis.data.nodes[0]);
				
			} catch(error:Error){
				}
			actionbox.setVisible(false);
			
		}
		private function hideBox(event:MouseEvent):void{
			if ((panel1.mouseX - xpos) > 50 || (panel1.mouseX - ypos) > 50){  
				actionbox.visible=false;
			}
		}
		private function die(event:MouseEvent):void{
			
		}
		private function shuffle():void{
			try{
				if (panel1.rawChildren.numChildren > 0){
					panel1.rawChildren.removeChildAt(panel1.rawChildren.numChildren - 1);
					actionbox.visible = false;
					if (panel1.rawChildren.numChildren > 0){
					 	vis = panel1.rawChildren.getChildAt(panel1.rawChildren.numChildren - 1) as Visualization;	
					}
				}
			} catch(e:Error){}
		}
		private function solo():void{
			for (var i:int =0; i< panel1.rawChildren.numChildren - 1; i++){
				panel1.rawChildren.removeChildAt(i);
			} 
		}
		private function drag(event:MouseEvent):void{
			((event.target as NodeSprite).parent as Sprite).startDrag(false, new Rectangle(-400, -300, 900, 700));
			changeCenter=false;
		}
		private function stop(event:MouseEvent):void{
			((event.target as NodeSprite).parent as Sprite).stopDrag();
			changeCenter=true;
			
		}
		private function drawInfo(event:MouseEvent):void{
			
			var n:NodeSprite = event.target as NodeSprite;
			if (n == null) return;	
			if (n.data.type=="Schema" || n.data.type == "Entity" ){
				actionbox.visible = true;
			} 
			
			var s2:TextSprite = n.getChildAt(n.numChildren-1) as TextSprite; // get the text sprite belonging to this node sprite
			if (s2 == null) return;
			trace("Mouse Over: " + s2.text);
			properties.text = "Mouse Over: " + s2.text + 
			"\nDescription: " + n.data.desc +
			"\nType: " + n.data.type +
			"\nId: " + n.data.id +
			"\nMatched: " + n.data.matched +
			"\nScore: " + n.data.score;
			var r:RectSprite = n.getChildAt(0) as RectSprite; 
			xpos = panel1.mouseX;
			ypos = panel1.mouseY;
			actionbox.x = xpos + 10;
			actionbox.y = ypos - 50;
			if (prev!=null) (prev.getChildAt(0) as RectSprite).lineColor = 0xff000044;
			prev = n;
			r.lineColor = 0xFFFF0000;
		}
		
		private function update(event:MouseEvent):void {
			if (!changeCenter) return;
			var n:NodeSprite = event.target as NodeSprite;
			if (n == null) return; 
			updateRoot(n);
		}
		
		private function updateRoot(n:NodeSprite):void {
			vis.data.root = n; 
			_gdf.focusNodes = [n];
			var t1:Transitioner = new Transitioner(_transitionDuration);
			vis.update(t1).play();
			//actionbox.x = n.x;
			//actionbox.y = n.y;
		}
		
		
				
		private function getMaxTextLabelWidth() : Number {
			var maxLabelWidth:Number = 0;
			vis.data.nodes.visit(function(n:NodeSprite):void {
				var w:Number = getTextLabelWidth(n);
				if (w > maxLabelWidth) {
					maxLabelWidth = w;
				}
				
			});
			return maxLabelWidth;
		}
		
		private function getMaxTextLabelHeight() : Number {
			var maxLabelHeight:Number = 0;
			vis.data.nodes.visit(function(n:NodeSprite):void {
				var h:Number = getTextLabelHeight(n);
				if (h > maxLabelHeight) {
					maxLabelHeight = h;
				}
				
			});
			return maxLabelHeight;
		}
			
		private function getTextLabelWidth(s:NodeSprite) : Number {
			var s2:TextSprite = s.getChildAt(s.numChildren-1) as TextSprite; // get the text sprite belonging to this node sprite
			var b:Rectangle = s2.getBounds(s);
			return s2.width;
		}

	private function changeLayout(event:ItemClickEvent):void{
			properties.text= "" + event.index;
			switch(event.index){
				case 0:
					lay = new NodeLinkTreeLayout();
					break;
				case 1:
					lay = new RadialTreeLayout();
					(lay as RadialTreeLayout).useNodeSize = false;
					(lay as RadialTreeLayout).radiusIncrement = -1;
					break;
			}
			vis.operators.removeOperatorAt(vis.operators.length - 1);
			vis.operators.add(lay);
			
			updateRoot(vis.data.root);
		}
		private function getTextLabelHeight(s:NodeSprite) : Number {
			var s2:TextSprite = s.getChildAt(s.numChildren-1) as TextSprite; // get the text sprite belonging to this node sprite
			var b:Rectangle = s2.getBounds(s);
			return s2.height;
		}
		
		private function adjustLabel(s:NodeSprite, w:Number, h:Number) : void {
			
			var s2:TextSprite = s.getChildAt(s.numChildren-1) as TextSprite; // get the text sprite belonging to this node sprite
			
			s2.horizontalAnchor = TextSprite.CENTER;
			s2.verticalAnchor = TextSprite.CENTER;
						
		}	

		public function updateGraph(id:String):void {
			var params:Object = {};
   			params["resultId"] = id;
			graphVisRequest.send(params);
		}
		
		private function graphVisResultHandler(event:ResultEvent):void {
			trace(event.result.toString());

			var dataSet:DataSet = new GraphMLConverter().parse(event.result as XML);

			onLoaded(Data.fromDataSet(dataSet));
		}

		private function graphVisFaultHandler(event:FaultEvent):void {
			Alert.show(event.fault.message, "Schema result retrieval failed");
		}		

		]]>
	</mx:Script>
	
</mx:HBox>	
<mx:HTTPService id="graphVisRequest"
					url="/SchemrWeb/GraphVisualizationServlet"
					method="GET"
					resultFormat="e4x"
					result="graphVisResultHandler(event);"
					fault="graphVisFaultHandler(event);">
	</mx:HTTPService>
	<mx:Panel layout="horizontal" scaleX="0.8" scaleY="0.8" id="actionbox"  visible="false" alpha="0.7" x="100" y="100" borderThickness="0" headerHeight="0">
		<mx:Button  paddingBottom="0" paddingLeft="0" paddingRight="0"  paddingTop="0" label="x" click="shuffle()" />
		
		<mx:ToggleButtonBar id="myBar" itemClick="changeLayout(event);">
			<mx:dataProvider>
				<mx:Array id="dp">  
					<mx:String>Tree</mx:String>
					<mx:String>Graph</mx:String>
				</mx:Array>  
		 	</mx:dataProvider>
		 </mx:ToggleButtonBar>
		 <mx:Button visible="true" label="!" id="sol" click="solo();" />
	</mx:Panel>
	 	
</mx:HBox>